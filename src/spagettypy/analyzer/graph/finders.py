from .interfaces import GraphProto
from typing import Iterator, TypeVar, Optional, Type ,Sequence
from pathlib import Path


N = TypeVar("N")  

class FindNodeByName:
    def __init__(self, graph: GraphProto):
        self.graph = graph
    
    def __call__(self,prop: str) -> Optional[N]:
        for node in list(self.graph.nodes()):
            if hasattr(node, "name") and getattr(node, "name") == prop:
                return node
        return None
    
    
from pathlib import Path
from typing import Optional, TypeVar

N = TypeVar("N")

class FindNodeByImportLike:
    """
    –ò—â–µ—Ç —É–∑–µ–ª –≤ –≥—Ä–∞—Ñ–µ –ø–æ –ø—É—Ç–∏ –∏–º–ø–æ—Ä—Ç–∞, –¥–∞–∂–µ –µ—Å–ª–∏ –ø—É—Ç—å —É–∫–æ—Ä–æ—á–µ–Ω:
    'analyzer.parsers.structure_analyzer' ‚Üí structure_analyzer –∏–∑ src/spagettypy/analyzer/parsers/
    """

    def __init__(self, graph, root: Path):
        self.graph = graph
        self.root = root.resolve()

    # üîπ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ "–ø—É—Ç–∏ –º–æ–¥—É–ª—è"
    def _import_path_of(self, node) -> Optional[str]:
        node_path = getattr(node, "path", None)
        node_name = getattr(node, "name", None)
        if not node_path or not node_name:
            return None
        try:
            rel = Path(node_path).relative_to(self.root)
        except ValueError:
            return None

        parts = list(rel.parts)
        # –¥–æ–±–∞–≤–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        parts.append(node_name)
        return ".".join(parts)

    # üîπ –ø–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –ø—É—Ç–∏ –∏–º–ø–æ—Ä—Ç–∞
    def __call__(self, import_like: str) -> Optional[N]:
        import_like = import_like.strip(".")
        segments = import_like.split(".")
        target_name = segments[-1]

        # –°–Ω–∞—á–∞–ª–∞ ‚Äî —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏
        for node in list(self.graph.nodes()):
            ipath = self._import_path_of(node)
            if ipath and (ipath.endswith(import_like) or ipath == import_like):
                return node

        # –ó–∞—Ç–µ–º ‚Äî –ø–æ –∏–º–µ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, structure_analyzer)
        for node in list(self.graph.nodes()):
            if getattr(node, "name", None) == target_name:
                return node

        return None
